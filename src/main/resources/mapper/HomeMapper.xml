<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cubic.api.mapper.HomeMapper">

   <resultMap type="com.cubic.api.model.BaseRegion" id="regionMaps">
		<id column="value" property="value"/>
		<result column="label" property="label"/>
		<result column="region_code" property="region_code"/>
		<collection property="children" ofType="com.cubic.api.model.BaseStreet" select="getStreets" column="region_code">
		</collection>
	</resultMap>
	<resultMap id="BaseHouseMap" type="com.cubic.api.model.BusHouse">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="number" jdbcType="VARCHAR" property="number" />
    <result column="owner" jdbcType="VARCHAR" property="owner" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="price" jdbcType="VARCHAR" property="price" />
    <result column="floor" jdbcType="VARCHAR" property="floor" />
    <result column="maxfloor" jdbcType="VARCHAR" property="maxfloor" />
    <result column="huxing" jdbcType="VARCHAR" property="huxing" />
    <result column="areas" jdbcType="VARCHAR" property="areas" />
    <result column="hiddenarea" jdbcType="VARCHAR" property="hiddenarea" />
    <result column="chaoxiang" jdbcType="VARCHAR" property="chaoxiang" />
    <result column="grade" jdbcType="VARCHAR" property="grade" />
    <result column="record_user_name" jdbcType="VARCHAR" property="recordUserName" />
    <result column="create_user_name" jdbcType="VARCHAR" property="createUserName" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="introduce" jdbcType="VARCHAR" property="introduce" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="region_id" jdbcType="BIGINT" property="regionId" />
    <result column="street_id" jdbcType="BIGINT" property="street_id" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="iskey" jdbcType="VARCHAR" property="iskey" />
    <result column="key_user_name" jdbcType="VARCHAR" property="keyUserName" />
    <result column="exploration_user_name" jdbcType="VARCHAR" property="explorationUserName" />
    <result column="shiimg" jdbcType="VARCHAR" property="shiimg" />
    <result column="tingimg" jdbcType="VARCHAR" property="tingimg" />
    <result column="weiimg" jdbcType="VARCHAR" property="weiimg" />
    <result column="chuimg" jdbcType="VARCHAR" property="chuimg" />
    <result column="huxingimg" jdbcType="VARCHAR" property="huxingimg" />
    <result column="otherimg" jdbcType="VARCHAR" property="otherimg" />
    <result column="record_time" jdbcType="TIMESTAMP" property="recordTime" />
    <result column="exclusive_user_name" jdbcType="VARCHAR" property="exclusiveUserName" />
    <result column="numfloor" jdbcType="VARCHAR" property="numfloor" />
    <result column="numunit" jdbcType="VARCHAR" property="numunit" />
    <result column="numhousehold" jdbcType="VARCHAR" property="numhousehold" />
    <result column="searchtext" jdbcType="VARCHAR" property="searchtext" />
    <result column="xiaoqu_name" jdbcType="VARCHAR" property="xiaoquName" />
    <result column="region_name" jdbcType="VARCHAR" property="regionName" />
    <result column="street_name" jdbcType="VARCHAR" property="streetName" />
    <result column="isfine" jdbcType="VARCHAR" property="isfine" />
    <result column="isshare" jdbcType="VARCHAR" property="isshare" />
    <result column="record_rel_name" jdbcType="VARCHAR" property="recordrelName" />
    <result column="create_rel_name" jdbcType="VARCHAR" property="createrelName" />
    <result column="key_rel_name" jdbcType="VARCHAR" property="keyrelName" />
    <result column="exploration_rel_name" jdbcType="VARCHAR" property="explorationrelName" />
  </resultMap>
	
	<select id="listRegions" parameterType="com.cubic.api.model.BaseRegion" resultMap="regionMaps">
		select 
			s.id as value,
			s.region_name as label,
			s.region_code
		from base_region s
	</select>
	
	<select id="getStreets" parameterType="String" resultType="com.cubic.api.model.BaseStreet">
		select 
			s.id as value,
			s.street_name as label
		from base_street s
		where s.region_code = #{region_code}
	</select>
	
	<select id="listXiaoQu" resultType="com.cubic.api.model.BaseXiaoQu">
		select 
			h.xiaoqu_name as `value`,
			h.street_name as address
		from bus_house h
	</select>
	<select id="findByUser" parameterType="map" resultType="com.cubic.api.model.home.CurrentUser">
		SELECT
        u.*,
        <if test="role !=null and role == 1 ">
        	  (SELECT SUM(price) FROM bus_achievement) current_score,
        </if>
        <if test="role !=null and (role== 4 or role == 5)">
             (SELECT SUM(price) FROM bus_achievement bas LEFT JOIN `sys_user` us ON us.username = bas.user_name WHERE us.store_id = bs.id) current_score,
        </if>
        <if test="role !=null and (role== 2 or role == 3) ">
        	SUM(ba.`price`) current_score,
        </if>
        bs.store_name,
        sr.desc
        FROM `sys_user` u
        LEFT JOIN bus_achievement ba ON ba.user_name = u.username
        LEFT JOIN base_store bs ON bs.id = u.store_id
        LEFT JOIN sys_user_role sur ON sur.user_id= u.id
        LEFT JOIN sys_role sr ON sr.id = sur.role_id
        
        <where>
             <if test="username != null">u.username = #{username}</if>
        </where>
	
	</select>
	
	
	<select id="listLatentScore" parameterType="map" resultMap="BaseHouseMap">
			SELECT 		
			 bh.price,
			 <choose>
				    <when test="role != null and (role == 2 or role == 3)">
				       	 (CASE
								WHEN  bh.record_user_name =#{username}   THEN  bh.record_user_name 
								ELSE NULL
							END) record_user_name,
							 (CASE
								WHEN   bh.`key_user_name` =#{username}  THEN   bh.`key_user_name`
								ELSE NULL
							END) key_user_name,
							 (CASE
								WHEN    bh.`create_user_name` =#{username}   THEN    bh.`create_user_name`
								ELSE NULL
							END) create_user_name,
							 (CASE
								WHEN     bh.`exploration_user_name` =#{username}   THEN    bh.`exploration_user_name`
								ELSE NULL
							END)  exploration_user_name	
				    </when>
				    <otherwise>
				     	 bh.record_user_name,
						 bh.`key_user_name`,
						 bh.`create_user_name`,
						 bh.`exploration_user_name`
				    </otherwise>
				</choose>

		
			 FROM 	bus_house bh
			 WHERE 
			 1=1
			 <if test="role != null and (role == 2 or role == 3)">
				 AND (bh.`record_user_name`=#{username}
				OR bh.`key_user_name`=#{username}
				OR bh.`create_user_name`=#{username}
				OR bh.`exploration_user_name`=#{username})
			 </if>	
	
	</select>
	
		<select id="listLatentScoreStore" parameterType="map" resultMap="BaseHouseMap">

        SELECT 		
			 bh.price,
			(CASE
			        WHEN   bs.id =(SELECT store_id FROM sys_user WHERE username= bh.record_user_name  ) THEN  bh.record_user_name 
			        ELSE NULL
				END) record_user_name,
			(CASE
			        WHEN   bs.id =(SELECT store_id	 FROM sys_user WHERE username= bh.key_user_name  )   THEN   bh.`key_user_name`
			        ELSE NULL
			        END) key_user_name,
			(CASE
				WHEN   bs.id =(SELECT store_id	 FROM sys_user WHERE username= bh.create_user_name  )    THEN    bh.`create_user_name`
				ELSE NULL
				END) create_user_name,
			(CASE
				WHEN    bs.id =(SELECT store_id	 FROM sys_user WHERE username= bh.exploration_user_name  )   THEN    bh.`exploration_user_name`
				ELSE NULL
				END)  exploration_user_name
							
			
			 FROM 	bus_house bh
			 LEFT JOIN  `sys_user` u ON u.`username` =#{username}
			 LEFT JOIN base_store bs ON bs.id = u.store_id	
			 
	
	</select>
	
	<select id="findMyinfo" parameterType="map" resultType="com.cubic.api.model.home.CurrentUser">
			SELECT
		        u.*,
		         bs.store_name,
			        sr.desc
			        FROM `sys_user` u
			        LEFT JOIN bus_achievement ba ON ba.user_name = u.username
			        LEFT JOIN base_store bs ON bs.id = u.store_id
			        LEFT JOIN sys_user_role sur ON sur.user_id= u.id
			        LEFT JOIN sys_role sr ON sr.id = sur.role_id

		        WHERE 
					u.username=#{username}
				GROUP BY u.`id`	
		
		
	
	</select>
	
	<update id="updatePassword" parameterType="map">
		UPDATE `sys_user` 
		SET password=#{password}
		WHERE 
			username=#{username}
	</update>
	
	
	<update id="upadateInfo" parameterType="com.cubic.api.model.User">
		<if test="relname!=null or phone!=null">
		
			UPDATE 
				`sys_user`
			<if test="relname!=null">
				SET relname= #{relname}
			</if>
			<if test="phone!=null">
				SET	phone = #{phone}
			</if>
			
			WHERE 
				username=#{username}
			
		</if>	
	</update>
	<select id="listRankings" parameterType="map"  resultType="com.cubic.api.model.home.CurrentScore">
		  SELECT a.*,@rownum:=@rownum+1 AS rank FROM (SELECT
		  su.username,
		  su.relname real_name,
		  SUM(price) score,
		  bs.`store_name`
		  FROM sys_user su 
          LEFT JOIN  bus_achievement ba  ON  su.username =ba.user_name AND  ba.examine_type=1 
          
          <if test="type!=null">
				<if test="type==1">
					<![CDATA[ AND DATE(ba.create_time) > DATE(DATE_SUB(NOW(),INTERVAL 7 DAY)) AND  DATE(ba.create_time) <= DATE(NOW())]]>
				</if>
				<if test="type==2">
					<![CDATA[ AND DATE(ba.create_time) > DATE(DATE_SUB(NOW(),INTERVAL 30 DAY)) AND  DATE(ba.create_time) <= DATE(NOW())]]>
				</if>
			</if>
		LEFT JOIN sys_user_role sur ON su.id=sur.user_id 
		LEFT JOIN base_store bs ON bs.`id`=su.store_id
		WHERE 
		   sur.role_id=2
			<if test="role!=null and role==2">
			  AND 	su.`store_id`=(SELECT store_id FROM sys_user WHERE username=#{userName})
		    </if>		
		GROUP BY su.username
		ORDER BY SUM(price) DESC) a,(SELECT @rownum:=0) r
	</select>
	
	<update id="upadateImg" parameterType="String">
			UPDATE 
				`sys_user`
				SET avatar= #{avatar}
			WHERE 
				username=#{username}

	</update>
	<select id="newHouseList" resultType="com.cubic.api.model.BusHouse">
		SELECT *,xiaoqu_name xiaoquName
		FROM bus_house
		GROUP BY create_time DESC
		LIMIT 10
	</select>
</mapper>